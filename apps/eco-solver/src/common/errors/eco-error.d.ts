import { Network } from '@eco-solver/common/alchemy/network';
import { Logger } from '@nestjs/common';
import { Chain, TransactionReceipt } from 'viem';
import { AwsCredential } from '@libs/solver-config';
import { ProofType } from '@eco-solver/contracts';
export declare class EcoError extends Error {
    static AlchemyUnsupportedNetworkError(network: Network): EcoError;
    static AlchemyUnsupportedNetworkIDError(id: number): EcoError;
    static AlchemyServiceProviderError(network: string): EcoError;
    static BalanceServiceInvalidDecimals(address: string): EcoError;
    static IntentSourceDataNotFound(intentHash: string): EcoError;
    static IntentValidationFailed(hash: string): EcoError;
    static IntentSourceNotFound(chainID: number): EcoError;
    static IntentSourceDataInvalidParams: Error;
    static IntentSourceTargetConfigNotFound(target: string): EcoError;
    static TargetSelectorNotSupported(target: string): EcoError;
    static IntentSourceUnsupportedTargetType(targetType: string): EcoError;
    static ChainConfigNotFound(chainID: string): EcoError;
    static ChainRPCNotFound(chainID: number): EcoError;
    static InvalidSimpleAccountConfig(): EcoError;
    static InvalidKernelAccountConfig(): EcoError;
    static ProverNotSupported(pt: ProofType): Error;
    static ProverNotAllowed(source: number, destination: number, prover: string): Error;
    static RebalancingRouteNotFound(): EcoError;
    static IntentNotFound: Error;
    static QuoteNotFound: Error;
    static QuoteDBUpdateError: Error;
    static GaslessIntentsNotSupported: Error;
    static NoPermitsProvided: Error;
    static AllPermitsMustBeOnSameChain: Error;
    static InvalidVaultAddress: EcoError;
    static InvalidPermit2Address: EcoError;
    static InvalidPermitSignature: EcoError;
    static InvalidPermitNonce: EcoError;
    static PermitExpired: EcoError;
    static PermitExpirationMismatch: EcoError;
    static PermitSimulationsFailed: EcoError;
    static VaultAlreadyClaimed: EcoError;
    static VaultAlreadyFunded: EcoError;
    static VaultNotFullyFundedAfterPermit: EcoError;
    static GasEstimationError: Error;
    static FeasibilityIntentNoTransactionError: Error;
    static FulfillIntentNoTransactionError: Error;
    static FulfillIntentProverNotFound: Error;
    static FulfillIntentBatchError: Error;
    static FulfillIntentRevertError(receipt: TransactionReceipt): Error;
    static ValidateIntentDescructureFailed(err?: Error): Error;
    static WatchEventUnsubscribeError: Error;
    static WatchEventUnsubscribeFromError(chainID: number): Error;
    static WatchEventNoUnsubscribeError(chainID: number): Error;
    static UnsupportedChainError(chain: Chain): EcoError;
    static KmsCredentialsError(config?: AwsCredential): EcoError;
    static CrowdLiquidityRewardNotEnough(intentHash: string): EcoError;
    static CrowdLiquidityPoolNotSolvent(intentHash: string): EcoError;
    static SolverRegistrationError: EcoError;
    static TypedDataVerificationFailed: EcoError;
    static SignatureExpired: EcoError;
    static InvalidSignature: EcoError;
    static NegativeGasOverhead(gasOverhead: number): EcoError;
    static DefaultGasOverheadUndefined(): EcoError;
    static isEcoError(error: any): boolean;
    static getErrorObject(error: any): Error;
    static logErrorWithStack(error: any, caller: string, srcLogger: Logger, properties?: object): void;
    static _logError(error: Error, caller: string, srcLogger: Logger, properties: object, logStack?: boolean): void;
    static getErrorMessage(error: any): string;
}
