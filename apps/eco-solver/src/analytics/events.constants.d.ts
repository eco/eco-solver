/**
 * Analytics event constants for the eco-solver application.
 * Centralizes all event names to ensure consistency and prevent typos.
 */
export declare const INTENT_EVENTS: {
    readonly DUPLICATE_DETECTED: "intent_duplicate_detected";
    readonly CREATED_AND_QUEUED: "intent_created_and_queued";
    readonly CREATED_WALLET_REJECTED: "intent_created_wallet_rejected";
    readonly CREATION_STARTED: "intent_creation_started";
    readonly CREATION_FAILED: "intent_creation_failed";
    readonly GASLESS_CREATED: "gasless_intent_created";
    readonly GASLESS_CREATION_STARTED: "gasless_intent_creation_started";
    readonly GASLESS_CREATION_FAILED: "gasless_intent_creation_failed";
    readonly VALIDATION_STARTED: "intent_validation_started";
    readonly VALIDATION_FAILED: "intent_validation_failed";
    readonly VALIDATION_CHECKS_PASSED: "intent_validation_checks_passed";
    readonly VALIDATED_AND_QUEUED: "intent_validated_and_queued";
    readonly FUNDING_CHECK_STARTED: "intent_funding_check_started";
    readonly FUNDING_CHECK_RETRY: "intent_funding_check_retry";
    readonly FUNDING_VERIFIED: "intent_funding_verified";
    readonly FUNDING_CHECK_FAILED: "intent_funding_check_failed";
    readonly FEASIBILITY_CHECK_STARTED: "intent_feasibility_check_started";
    readonly FEASIBILITY_CHECK_SUCCESS: "intent_feasibility_check_success";
    readonly FEASIBILITY_CHECK_FAILED: "intent_feasibility_check_failed";
    readonly FEASIBLE_AND_QUEUED: "intent_feasible_and_queued";
    readonly INFEASIBLE: "intent_infeasible";
    readonly FULFILLMENT_STARTED: "intent_fulfillment_started";
    readonly FULFILLMENT_SUCCESS: "intent_fulfillment_success";
    readonly FULFILLMENT_FAILED: "intent_fulfillment_failed";
    readonly FULFILLMENT_SKIPPED: "intent_fulfillment_skipped";
    readonly FULFILLMENT_METHOD_SELECTED: "intent_fulfillment_method_selected";
    readonly FULFILLMENT_TRANSACTION_REVERTED: "intent_fulfillment_transaction_reverted";
    readonly WALLET_FULFILLMENT_SUCCESS: "wallet_fulfillment_success";
    readonly WALLET_FULFILLMENT_FAILED: "wallet_fulfillment_failed";
    readonly WALLET_FULFILLMENT_TRANSACTION_REVERTED: "wallet_fulfillment_transaction_reverted";
    readonly ERC20_TRANSACTION_HANDLING_SUCCESS: "erc20_transaction_handling_success";
    readonly ERC20_TRANSACTION_HANDLING_UNSUPPORTED: "erc20_transaction_handling_unsupported";
    readonly TRANSACTION_TARGET_GENERATION_SUCCESS: "transaction_target_generation_success";
    readonly TRANSACTION_TARGET_GENERATION_ERROR: "transaction_target_generation_error";
    readonly TRANSACTION_TARGET_UNSUPPORTED_CONTRACT_TYPE: "transaction_target_unsupported_contract_type";
    readonly FULFILL_INTENT_TX_CREATION_SUCCESS: "fulfill_intent_tx_creation_success";
    readonly FULFILL_INTENT_TX_CREATION_FAILED: "fulfill_intent_tx_creation_failed";
    readonly INTENT_STATUS_UPDATE: "intent_status_update";
    readonly FULFILLMENT_PROCESSING_SUCCESS: "fulfillment_processing_success";
    readonly FULFILLMENT_PROCESSING_ERROR: "fulfillment_processing_error";
    readonly FULFILLMENT_PROCESSING_INTENT_NOT_FOUND: "fulfillment_processing_intent_not_found";
    readonly INTENT_PROCESS_DATA_RETRIEVAL_SUCCESS: "intent_process_data_retrieval_success";
    readonly INTENT_PROCESS_DATA_RETRIEVAL_ERROR: "intent_process_data_retrieval_error";
    readonly INTENT_PROCESS_DATA_RETRIEVAL_MODEL_NOT_FOUND: "intent_process_data_retrieval_model_not_found";
    readonly INTENT_PROCESS_DATA_RETRIEVAL_SOLVER_NOT_FOUND: "intent_process_data_retrieval_solver_not_found";
    readonly SOLVER_RESOLUTION_SUCCESS: "solver_resolution_success";
    readonly SOLVER_RESOLUTION_NOT_FOUND: "solver_resolution_not_found";
    readonly INTENT_RETRIEVAL_SUCCESS: "intent_retrieval_success";
    readonly INTENT_RETRIEVAL_ERROR: "intent_retrieval_error";
    readonly INTENT_RETRIEVAL_NOT_FOUND: "intent_retrieval_not_found";
    readonly CROWD_LIQUIDITY_ROUTE_CHECK: "intent_crowd_liquidity_route_check";
    readonly CROWD_LIQUIDITY_FULFILLMENT_STARTED: "intent_crowd_liquidity_fulfillment_started";
    readonly CROWD_LIQUIDITY_FULFILLMENT_SUCCEEDED: "intent_crowd_liquidity_fulfillment_succeeded";
    readonly CROWD_LIQUIDITY_FULFILLMENT_FAILED: "intent_crowd_liquidity_fulfillment_failed";
    readonly CROWD_LIQUIDITY_FULFILLMENT_SUCCESS: "crowd_liquidity_fulfillment_success";
    readonly CROWD_LIQUIDITY_FULFILLMENT_REWARD_NOT_ENOUGH: "crowd_liquidity_fulfillment_reward_not_enough";
    readonly CROWD_LIQUIDITY_FULFILLMENT_POOL_NOT_SOLVENT: "crowd_liquidity_fulfillment_pool_not_solvent";
    readonly CROWD_LIQUIDITY_REBALANCE_SUCCESS: "crowd_liquidity_rebalance_success";
    readonly CROWD_LIQUIDITY_REBALANCE_ERROR: "crowd_liquidity_rebalance_error";
    readonly CROWD_LIQUIDITY_ROUTE_SUPPORT_CHECK: "crowd_liquidity_route_support_check";
    readonly CROWD_LIQUIDITY_ROUTE_SUPPORT_RESULT: "crowd_liquidity_route_support_result";
    readonly CROWD_LIQUIDITY_REWARD_CHECK: "crowd_liquidity_reward_check";
    readonly CROWD_LIQUIDITY_REWARD_CHECK_RESULT: "crowd_liquidity_reward_check_result";
    readonly CROWD_LIQUIDITY_POOL_SOLVENCY_CHECK: "crowd_liquidity_pool_solvency_check";
    readonly CROWD_LIQUIDITY_POOL_SOLVENCY_RESULT: "crowd_liquidity_pool_solvency_result";
    readonly CROWD_LIQUIDITY_POOL_SOLVENCY_ERROR: "crowd_liquidity_pool_solvency_error";
    readonly CROWD_LIQUIDITY_LIT_ACTION_SUCCESS: "crowd_liquidity_lit_action_success";
    readonly CROWD_LIQUIDITY_LIT_ACTION_ERROR: "crowd_liquidity_lit_action_error";
    readonly WALLET_FULFILLMENT_FALLBACK: "intent_wallet_fulfillment_fallback";
};
export declare const QUOTE_EVENTS: {
    readonly REQUEST_RECEIVED: "quote_request_received";
    readonly REVERSE_REQUEST_RECEIVED: "reverse_quote_request_received";
    readonly RESPONSE_SUCCESS: "quote_response_success";
    readonly RESPONSE_ERROR: "quote_response_error";
    readonly REVERSE_RESPONSE_SUCCESS: "reverse_quote_response_success";
    readonly REVERSE_RESPONSE_ERROR: "reverse_quote_response_error";
    readonly PROCESSING_STARTED: "quote_processing_started";
    readonly PROCESSING_SUCCESS: "quote_processing_success";
    readonly PROCESSING_FAILED_ALL: "quote_processing_failed_all";
    readonly STORAGE_SUCCESS: "quote_storage_success";
    readonly STORAGE_FAILED: "quote_storage_failed";
    readonly VALIDATION_STARTED: "quote_validation_started";
    readonly VALIDATION_SUCCESS: "quote_validation_success";
    readonly VALIDATION_FAILED: "quote_validation_failed";
    readonly GENERATION_STARTED: "quote_generation_started";
    readonly GENERATION_SUCCESS: "quote_generation_success";
    readonly GENERATION_FAILED: "quote_generation_failed";
    readonly DATABASE_STORE_SUCCESS: "quote_database_store_success";
    readonly DATABASE_STORE_ERROR: "quote_database_store_error";
    readonly FEASIBILITY_CHECK_SUCCESS: "quote_feasibility_check_success";
    readonly FEASIBILITY_CHECK_ERROR: "quote_feasibility_check_error";
};
export declare const WATCH_EVENTS: {
    readonly CREATE_INTENT_SUBSCRIPTION_STARTED: "watch_create_intent_subscription_started";
    readonly CREATE_INTENT_SUBSCRIPTION_SUCCESS: "watch_create_intent_subscription_success";
    readonly CREATE_INTENT_SUBSCRIPTION_FAILED: "watch_create_intent_subscription_failed";
    readonly CREATE_INTENT_EVENTS_DETECTED: "watch_create_intent_events_detected";
    readonly CREATE_INTENT_JOB_QUEUED: "watch_create_intent_job_queued";
    readonly CREATE_INTENT_JOB_QUEUE_FAILED: "watch_create_intent_job_queue_failed";
    readonly INTENT_FUNDED_EVENTS_DETECTED: "watch_intent_funded_events_detected";
    readonly INTENT_FUNDED_JOB_QUEUED: "watch_intent_funded_job_queued";
    readonly INTENT_FUNDED_JOB_QUEUE_FAILED: "watch_intent_funded_job_queue_failed";
    readonly FULFILLMENT_EVENTS_DETECTED: "watch_fulfillment_events_detected";
    readonly FULFILLMENT_JOB_QUEUED: "watch_fulfillment_job_queued";
    readonly FULFILLMENT_JOB_QUEUE_FAILED: "watch_fulfillment_job_queue_failed";
    readonly WATCH_ERROR_OCCURRED: "watch_error_occurred";
    readonly WATCH_ERROR_RECOVERY_STARTED: "watch_error_recovery_started";
    readonly WATCH_ERROR_RECOVERY_SUCCESS: "watch_error_recovery_success";
    readonly WATCH_ERROR_RECOVERY_FAILED: "watch_error_recovery_failed";
    readonly UNSUBSCRIBE_ERROR: "watch_event_unsubscribe_error";
    readonly UNSUBSCRIBE_FROM_ERROR: "watch_event_unsubscribe_from_error";
};
export declare const BALANCE_EVENTS: {
    readonly FETCH_SUCCESS: "balance_fetch_success";
    readonly FETCH_FAILED: "balance_fetch_failed";
    readonly UPDATE_BALANCE: "balance_update";
    readonly LOAD_TOKEN_BALANCE: "balance_load_token_balance";
    readonly NATIVE_BALANCE_FETCH: "balance_native_fetch";
};
export declare const LIQUIDITY_MANAGER_EVENTS: {
    readonly STRATEGY_QUOTE_ERROR: "liquidity_strategy_quote_error";
    readonly QUOTE_ROUTE_ERROR: "liquidity_quote_route_error";
    readonly FALLBACK_ROUTE_ERROR: "liquidity_fallback_route_error";
    readonly CCTP_LIFI_EXECUTION_ERROR: "liquidity_cctp_lifi_execution_error";
    readonly CCTP_LIFI_ROUTE_CONTEXT_ERROR: "liquidity_cctp_lifi_route_context_error";
    readonly CCTP_LIFI_SOURCE_SWAP_ERROR: "liquidity_cctp_lifi_source_swap_error";
    readonly CCTP_LIFI_BRIDGE_ERROR: "liquidity_cctp_lifi_bridge_error";
    readonly LIFI_CACHE_INIT_ERROR: "liquidity_lifi_cache_init_error";
    readonly LIFI_CORE_TOKEN_ROUTE_ERROR: "liquidity_lifi_core_token_route_error";
};
export declare const HEALTH_EVENTS: {
    readonly CHECK_REQUEST: "health_check_request";
    readonly CHECK_SUCCESS: "health_check_success";
    readonly CHECK_ERROR: "health_check_error";
};
export declare const JOB_EVENTS: {
    readonly STARTED: "job_started";
    readonly COMPLETED: "job_completed";
    readonly FAILED: "job_failed";
};
export declare const ERROR_EVENTS: {
    readonly GASLESS_CREATION_FAILED: "gasless_intent_creation_failed";
    readonly INTENT_FEASIBILITY_CHECK_FAILED: "intent_feasibility_check_failed";
    readonly INTENT_FULFILLMENT_FAILED: "intent_fulfillment_failed";
    readonly INTENT_FUNDING_CHECK_FAILED: "intent_funding_check_failed";
    readonly CREATE_INTENT_JOB_QUEUE_FAILED: "watch_create_intent_job_queue_failed";
    readonly INTENT_FUNDED_JOB_QUEUE_FAILED: "watch_intent_funded_job_queue_failed";
    readonly FULFILLMENT_JOB_QUEUE_FAILED: "watch_fulfillment_job_queue_failed";
    readonly WATCH_CREATE_INTENT_SUBSCRIPTION_FAILED: "watch_create_intent_subscription_failed";
    readonly WATCH_INTENT_FUNDED_DB_ERROR: "watch_intent_funded_db_error";
};
export declare const COMMON_EVENTS: {
    readonly STARTED: "_started";
    readonly SUCCESS: "_success";
    readonly FAILED: "_failed";
    readonly COMPLETED: "_completed";
    readonly RETRY: "_retry";
    readonly SKIPPED: "_skipped";
};
export declare const ANALYTICS_EVENTS: {
    readonly INTENT: {
        readonly DUPLICATE_DETECTED: "intent_duplicate_detected";
        readonly CREATED_AND_QUEUED: "intent_created_and_queued";
        readonly CREATED_WALLET_REJECTED: "intent_created_wallet_rejected";
        readonly CREATION_STARTED: "intent_creation_started";
        readonly CREATION_FAILED: "intent_creation_failed";
        readonly GASLESS_CREATED: "gasless_intent_created";
        readonly GASLESS_CREATION_STARTED: "gasless_intent_creation_started";
        readonly GASLESS_CREATION_FAILED: "gasless_intent_creation_failed";
        readonly VALIDATION_STARTED: "intent_validation_started";
        readonly VALIDATION_FAILED: "intent_validation_failed";
        readonly VALIDATION_CHECKS_PASSED: "intent_validation_checks_passed";
        readonly VALIDATED_AND_QUEUED: "intent_validated_and_queued";
        readonly FUNDING_CHECK_STARTED: "intent_funding_check_started";
        readonly FUNDING_CHECK_RETRY: "intent_funding_check_retry";
        readonly FUNDING_VERIFIED: "intent_funding_verified";
        readonly FUNDING_CHECK_FAILED: "intent_funding_check_failed";
        readonly FEASIBILITY_CHECK_STARTED: "intent_feasibility_check_started";
        readonly FEASIBILITY_CHECK_SUCCESS: "intent_feasibility_check_success";
        readonly FEASIBILITY_CHECK_FAILED: "intent_feasibility_check_failed";
        readonly FEASIBLE_AND_QUEUED: "intent_feasible_and_queued";
        readonly INFEASIBLE: "intent_infeasible";
        readonly FULFILLMENT_STARTED: "intent_fulfillment_started";
        readonly FULFILLMENT_SUCCESS: "intent_fulfillment_success";
        readonly FULFILLMENT_FAILED: "intent_fulfillment_failed";
        readonly FULFILLMENT_SKIPPED: "intent_fulfillment_skipped";
        readonly FULFILLMENT_METHOD_SELECTED: "intent_fulfillment_method_selected";
        readonly FULFILLMENT_TRANSACTION_REVERTED: "intent_fulfillment_transaction_reverted";
        readonly WALLET_FULFILLMENT_SUCCESS: "wallet_fulfillment_success";
        readonly WALLET_FULFILLMENT_FAILED: "wallet_fulfillment_failed";
        readonly WALLET_FULFILLMENT_TRANSACTION_REVERTED: "wallet_fulfillment_transaction_reverted";
        readonly ERC20_TRANSACTION_HANDLING_SUCCESS: "erc20_transaction_handling_success";
        readonly ERC20_TRANSACTION_HANDLING_UNSUPPORTED: "erc20_transaction_handling_unsupported";
        readonly TRANSACTION_TARGET_GENERATION_SUCCESS: "transaction_target_generation_success";
        readonly TRANSACTION_TARGET_GENERATION_ERROR: "transaction_target_generation_error";
        readonly TRANSACTION_TARGET_UNSUPPORTED_CONTRACT_TYPE: "transaction_target_unsupported_contract_type";
        readonly FULFILL_INTENT_TX_CREATION_SUCCESS: "fulfill_intent_tx_creation_success";
        readonly FULFILL_INTENT_TX_CREATION_FAILED: "fulfill_intent_tx_creation_failed";
        readonly INTENT_STATUS_UPDATE: "intent_status_update";
        readonly FULFILLMENT_PROCESSING_SUCCESS: "fulfillment_processing_success";
        readonly FULFILLMENT_PROCESSING_ERROR: "fulfillment_processing_error";
        readonly FULFILLMENT_PROCESSING_INTENT_NOT_FOUND: "fulfillment_processing_intent_not_found";
        readonly INTENT_PROCESS_DATA_RETRIEVAL_SUCCESS: "intent_process_data_retrieval_success";
        readonly INTENT_PROCESS_DATA_RETRIEVAL_ERROR: "intent_process_data_retrieval_error";
        readonly INTENT_PROCESS_DATA_RETRIEVAL_MODEL_NOT_FOUND: "intent_process_data_retrieval_model_not_found";
        readonly INTENT_PROCESS_DATA_RETRIEVAL_SOLVER_NOT_FOUND: "intent_process_data_retrieval_solver_not_found";
        readonly SOLVER_RESOLUTION_SUCCESS: "solver_resolution_success";
        readonly SOLVER_RESOLUTION_NOT_FOUND: "solver_resolution_not_found";
        readonly INTENT_RETRIEVAL_SUCCESS: "intent_retrieval_success";
        readonly INTENT_RETRIEVAL_ERROR: "intent_retrieval_error";
        readonly INTENT_RETRIEVAL_NOT_FOUND: "intent_retrieval_not_found";
        readonly CROWD_LIQUIDITY_ROUTE_CHECK: "intent_crowd_liquidity_route_check";
        readonly CROWD_LIQUIDITY_FULFILLMENT_STARTED: "intent_crowd_liquidity_fulfillment_started";
        readonly CROWD_LIQUIDITY_FULFILLMENT_SUCCEEDED: "intent_crowd_liquidity_fulfillment_succeeded";
        readonly CROWD_LIQUIDITY_FULFILLMENT_FAILED: "intent_crowd_liquidity_fulfillment_failed";
        readonly CROWD_LIQUIDITY_FULFILLMENT_SUCCESS: "crowd_liquidity_fulfillment_success";
        readonly CROWD_LIQUIDITY_FULFILLMENT_REWARD_NOT_ENOUGH: "crowd_liquidity_fulfillment_reward_not_enough";
        readonly CROWD_LIQUIDITY_FULFILLMENT_POOL_NOT_SOLVENT: "crowd_liquidity_fulfillment_pool_not_solvent";
        readonly CROWD_LIQUIDITY_REBALANCE_SUCCESS: "crowd_liquidity_rebalance_success";
        readonly CROWD_LIQUIDITY_REBALANCE_ERROR: "crowd_liquidity_rebalance_error";
        readonly CROWD_LIQUIDITY_ROUTE_SUPPORT_CHECK: "crowd_liquidity_route_support_check";
        readonly CROWD_LIQUIDITY_ROUTE_SUPPORT_RESULT: "crowd_liquidity_route_support_result";
        readonly CROWD_LIQUIDITY_REWARD_CHECK: "crowd_liquidity_reward_check";
        readonly CROWD_LIQUIDITY_REWARD_CHECK_RESULT: "crowd_liquidity_reward_check_result";
        readonly CROWD_LIQUIDITY_POOL_SOLVENCY_CHECK: "crowd_liquidity_pool_solvency_check";
        readonly CROWD_LIQUIDITY_POOL_SOLVENCY_RESULT: "crowd_liquidity_pool_solvency_result";
        readonly CROWD_LIQUIDITY_POOL_SOLVENCY_ERROR: "crowd_liquidity_pool_solvency_error";
        readonly CROWD_LIQUIDITY_LIT_ACTION_SUCCESS: "crowd_liquidity_lit_action_success";
        readonly CROWD_LIQUIDITY_LIT_ACTION_ERROR: "crowd_liquidity_lit_action_error";
        readonly WALLET_FULFILLMENT_FALLBACK: "intent_wallet_fulfillment_fallback";
    };
    readonly QUOTE: {
        readonly REQUEST_RECEIVED: "quote_request_received";
        readonly REVERSE_REQUEST_RECEIVED: "reverse_quote_request_received";
        readonly RESPONSE_SUCCESS: "quote_response_success";
        readonly RESPONSE_ERROR: "quote_response_error";
        readonly REVERSE_RESPONSE_SUCCESS: "reverse_quote_response_success";
        readonly REVERSE_RESPONSE_ERROR: "reverse_quote_response_error";
        readonly PROCESSING_STARTED: "quote_processing_started";
        readonly PROCESSING_SUCCESS: "quote_processing_success";
        readonly PROCESSING_FAILED_ALL: "quote_processing_failed_all";
        readonly STORAGE_SUCCESS: "quote_storage_success";
        readonly STORAGE_FAILED: "quote_storage_failed";
        readonly VALIDATION_STARTED: "quote_validation_started";
        readonly VALIDATION_SUCCESS: "quote_validation_success";
        readonly VALIDATION_FAILED: "quote_validation_failed";
        readonly GENERATION_STARTED: "quote_generation_started";
        readonly GENERATION_SUCCESS: "quote_generation_success";
        readonly GENERATION_FAILED: "quote_generation_failed";
        readonly DATABASE_STORE_SUCCESS: "quote_database_store_success";
        readonly DATABASE_STORE_ERROR: "quote_database_store_error";
        readonly FEASIBILITY_CHECK_SUCCESS: "quote_feasibility_check_success";
        readonly FEASIBILITY_CHECK_ERROR: "quote_feasibility_check_error";
    };
    readonly WATCH: {
        readonly CREATE_INTENT_SUBSCRIPTION_STARTED: "watch_create_intent_subscription_started";
        readonly CREATE_INTENT_SUBSCRIPTION_SUCCESS: "watch_create_intent_subscription_success";
        readonly CREATE_INTENT_SUBSCRIPTION_FAILED: "watch_create_intent_subscription_failed";
        readonly CREATE_INTENT_EVENTS_DETECTED: "watch_create_intent_events_detected";
        readonly CREATE_INTENT_JOB_QUEUED: "watch_create_intent_job_queued";
        readonly CREATE_INTENT_JOB_QUEUE_FAILED: "watch_create_intent_job_queue_failed";
        readonly INTENT_FUNDED_EVENTS_DETECTED: "watch_intent_funded_events_detected";
        readonly INTENT_FUNDED_JOB_QUEUED: "watch_intent_funded_job_queued";
        readonly INTENT_FUNDED_JOB_QUEUE_FAILED: "watch_intent_funded_job_queue_failed";
        readonly FULFILLMENT_EVENTS_DETECTED: "watch_fulfillment_events_detected";
        readonly FULFILLMENT_JOB_QUEUED: "watch_fulfillment_job_queued";
        readonly FULFILLMENT_JOB_QUEUE_FAILED: "watch_fulfillment_job_queue_failed";
        readonly WATCH_ERROR_OCCURRED: "watch_error_occurred";
        readonly WATCH_ERROR_RECOVERY_STARTED: "watch_error_recovery_started";
        readonly WATCH_ERROR_RECOVERY_SUCCESS: "watch_error_recovery_success";
        readonly WATCH_ERROR_RECOVERY_FAILED: "watch_error_recovery_failed";
        readonly UNSUBSCRIBE_ERROR: "watch_event_unsubscribe_error";
        readonly UNSUBSCRIBE_FROM_ERROR: "watch_event_unsubscribe_from_error";
    };
    readonly BALANCE: {
        readonly FETCH_SUCCESS: "balance_fetch_success";
        readonly FETCH_FAILED: "balance_fetch_failed";
        readonly UPDATE_BALANCE: "balance_update";
        readonly LOAD_TOKEN_BALANCE: "balance_load_token_balance";
        readonly NATIVE_BALANCE_FETCH: "balance_native_fetch";
    };
    readonly LIQUIDITY_MANAGER: {
        readonly STRATEGY_QUOTE_ERROR: "liquidity_strategy_quote_error";
        readonly QUOTE_ROUTE_ERROR: "liquidity_quote_route_error";
        readonly FALLBACK_ROUTE_ERROR: "liquidity_fallback_route_error";
        readonly CCTP_LIFI_EXECUTION_ERROR: "liquidity_cctp_lifi_execution_error";
        readonly CCTP_LIFI_ROUTE_CONTEXT_ERROR: "liquidity_cctp_lifi_route_context_error";
        readonly CCTP_LIFI_SOURCE_SWAP_ERROR: "liquidity_cctp_lifi_source_swap_error";
        readonly CCTP_LIFI_BRIDGE_ERROR: "liquidity_cctp_lifi_bridge_error";
        readonly LIFI_CACHE_INIT_ERROR: "liquidity_lifi_cache_init_error";
        readonly LIFI_CORE_TOKEN_ROUTE_ERROR: "liquidity_lifi_core_token_route_error";
    };
    readonly HEALTH: {
        readonly CHECK_REQUEST: "health_check_request";
        readonly CHECK_SUCCESS: "health_check_success";
        readonly CHECK_ERROR: "health_check_error";
    };
    readonly JOB: {
        readonly STARTED: "job_started";
        readonly COMPLETED: "job_completed";
        readonly FAILED: "job_failed";
    };
    readonly ERROR: {
        readonly GASLESS_CREATION_FAILED: "gasless_intent_creation_failed";
        readonly INTENT_FEASIBILITY_CHECK_FAILED: "intent_feasibility_check_failed";
        readonly INTENT_FULFILLMENT_FAILED: "intent_fulfillment_failed";
        readonly INTENT_FUNDING_CHECK_FAILED: "intent_funding_check_failed";
        readonly CREATE_INTENT_JOB_QUEUE_FAILED: "watch_create_intent_job_queue_failed";
        readonly INTENT_FUNDED_JOB_QUEUE_FAILED: "watch_intent_funded_job_queue_failed";
        readonly FULFILLMENT_JOB_QUEUE_FAILED: "watch_fulfillment_job_queue_failed";
        readonly WATCH_CREATE_INTENT_SUBSCRIPTION_FAILED: "watch_create_intent_subscription_failed";
        readonly WATCH_INTENT_FUNDED_DB_ERROR: "watch_intent_funded_db_error";
    };
    readonly COMMON: {
        readonly STARTED: "_started";
        readonly SUCCESS: "_success";
        readonly FAILED: "_failed";
        readonly COMPLETED: "_completed";
        readonly RETRY: "_retry";
        readonly SKIPPED: "_skipped";
    };
};
export type IntentEventName = (typeof INTENT_EVENTS)[keyof typeof INTENT_EVENTS];
export type QuoteEventName = (typeof QUOTE_EVENTS)[keyof typeof QUOTE_EVENTS];
export type WatchEventName = (typeof WATCH_EVENTS)[keyof typeof WATCH_EVENTS];
export type AnalyticsEventName = IntentEventName | QuoteEventName | WatchEventName;
