import { Test, TestingModule } from '@nestjs/testing'
import { RhinestoneService } from './rhinestone.service'
import {
  RhinestoneMessageType,
  RhinestoneRelayerActionV1,
} from '../types/rhinestone-websocket.types'
import { WalletClientDefaultSignerService } from '@/transaction/smart-wallets/wallet-client.service'
import { KernelAccountClientService } from '@/transaction/smart-wallets/kernel/kernel-account-client.service'
import { RhinestoneApiService } from './rhinestone-api.service'
import { RhinestoneWebsocketService } from './rhinestone-websocket.service'
import { RhinestoneValidatorService } from './rhinestone-validator.service'
import { RhinestoneConfigService } from './rhinestone-config.service'
import { MultichainPublicClientService } from '@/transaction/multichain-public-client.service'
import { ValidateIntentService } from '@/intent/validate-intent.service'
import { EcoConfigService } from '@/eco-configs/eco-config.service'
import { Chain } from 'viem'
import { RhinestoneContractsService } from '@/rhinestone/services/rhinestone-contracts.service'
import { CacheModule } from '@nestjs/cache-manager'

describe('RhinestoneService', () => {
  let service: RhinestoneService
  let rhinestoneValidatorService: RhinestoneValidatorService

  beforeEach(async () => {
    const mockWalletClient = {
      sendTransaction: jest.fn(),
      chain: { id: 1 },
    }

    const mockKernelClient = {
      execute: jest.fn(),
    }

    const module: TestingModule = await Test.createTestingModule({
      imports: [CacheModule.register()],
      providers: [
        RhinestoneService,
        RhinestoneConfigService,
        RhinestoneValidatorService,
        RhinestoneContractsService,
        MultichainPublicClientService,
        {
          provide: WalletClientDefaultSignerService,
          useValue: {
            getClient: jest.fn().mockResolvedValue(mockWalletClient),
          },
        },
        {
          provide: KernelAccountClientService,
          useValue: {
            getClient: jest.fn().mockResolvedValue(mockKernelClient),
          },
        },
        {
          provide: RhinestoneApiService,
          useValue: {
            postFillPreconfirmation: jest.fn().mockResolvedValue(undefined),
          },
        },
        {
          provide: RhinestoneWebsocketService,
          useValue: {
            connect: jest.fn(),
          },
        },
        {
          provide: ValidateIntentService,
          useValue: {
            validateFullIntent: jest.fn().mockResolvedValue(true),
          },
        },
        {
          provide: EcoConfigService,
          useValue: {
            getRhinestone: jest.fn().mockReturnValue({
              websocket: {
                url: 'wss://example.com',
                reconnect: {
                  auto: true,
                  delay: 1000,
                  maxRetries: 5,
                },
              },
              api: {
                url: 'https://example.com',
                apiKey: 'test-key',
              },
              order: {
                settlementLayer: 'ECO',
              },
              contracts: {
                '10': {
                  router: '0x000000000004598d17aad017bf0734a364c5588b',
                  ecoArbiter: '0x0000000000814Cf877224D19919490d4761B0C86',
                  ecoAdapter: '0xa0de4A8e033FBceC2BFa708FaD59e1587839b4Ca',
                },
                '8453': {
                  router: '0x000000000004598d17aad017bf0734a364c5588b',
                  ecoArbiter: '0x0000000000814Cf877224D19919490d4761B0C86',
                  ecoAdapter: '0xa0de4A8e033FBceC2BFa708FaD59e1587839b4Ca',
                },
              },
            }),
            getRpcUrls: jest.fn().mockImplementation((chain: Chain) => ({
              rpcUrls: [chain.rpcUrls.default.http[0]],
              config: { isWebsocket: false },
            })),
            getEth: jest
              .fn()
              .mockReturnValue({ claimant: '0x000000000004598d17aad017bf0734a364c5588b' }),
          },
        },
      ],
    }).compile()

    service = module.get<RhinestoneService>(RhinestoneService)
    rhinestoneValidatorService = module.get<RhinestoneValidatorService>(RhinestoneValidatorService)

    // Mock logger methods
    jest.spyOn(service['logger'], 'log').mockImplementation()
    jest.spyOn(service['logger'], 'error').mockImplementation()
    jest.spyOn(rhinestoneValidatorService['logger'], 'log').mockImplementation()
    jest.spyOn(rhinestoneValidatorService['logger'], 'error').mockImplementation()
  })

  describe('handleRelayerAction', () => {
    it('should handle RelayerActionV1 message successfully', async () => {
      const message: RhinestoneRelayerActionV1 = {
        type: 'RelayerActionV1' as any,
        id: '4553030029990925175398279132779686295502294691564751005699155760834760671232',
        timestamp: 1753982792,
        fill: {
          id: 0,
          call: {
            chainId: 8453,
            data: '0xdf2c9057000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000920000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000014e59aaf21c4d9cf92d9ed4537f4404ba031f83b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007c426c43cab00000000000000000000000000000000000000000000000000000000000001000000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba800000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000006600a10ec75ea41f1f584c5c0230270be42c2d54dc4856fd0d1b589800000000000000000000000000000000000000000000000000000000000000000006a6cdac7000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000080eb8fc158c1940bba1592234697e2b1bc1e5ee7d152c1f55e56a941e652071bc4378c4c5156d99a6dfde0de15cc5f939fd58092b63d4ba8bf9f6bb0fb7f440577000000000000000000000000b39dca629be804b9e0ec7e6a7802f94f6a7cbb890a10ec75ea41f1f584c5c0230270be42c2d54dc4856fd0d1b589800000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000021050000000000000000000000000746dc2cdcbf6270c9c53d1c4923604448cf3e9400000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba80000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004598d17aad017bf0734a364c5588b0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000449f3606480f2b204785281156c138fb3b549d9d5fa5d5f3309de8251618f22e288dcdd16c0000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000256b70644f5d77bc8e2bb82c731ddf747ecb14710000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000550000000000e9e6e96bcaa3c113187cdb7e38aed94e5af5931eb89bba9865c0fa388f82c791b75932c9148c358338f2e3e3177d0c0f08b7e7ea14d5d537af0bbd73c103b52d80798a735d04594eb472fdc1ea8c731c00000000000000000000000000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba80000000000000000000000000746dc2cdcbf6270c9c53d1c4923604448cf3e9400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000b82ef2f94e3b1df8db24ecd927800f9da42dff4d0cb60f57785454e76f103e0548a6b7be215b50a45a66fe77d12511e372d4f03196c99bcfed231b417d8f449dac3c17364baa679bb4fd13153177e14ec34d86339ce1c0d283b2b69ef568655f00000000000000000000000000000000000000000000000000000000688ba8730000000000000000000000000000000000000000000000000000000000002105524208551627f53e238fd868ecf0135dbf3f8363aa79493b88a2258a8ab8cd8500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000414dcf2cb97f223ff63d1acd366ffcb0332554bd61a887b2daa39482459a8a39e80e8fe2d0a9f65746a2b86eac717a984fcc04346d26a8a1242bca4a73d7bd7c2a1c00000000000000000000000000000000000000000000000000000000000000',
            to: '0x000000000004598d17aad017bf0734a364c5588b',
            value: '0',
          },
        },
        claims: [
          {
            id: 0,
            call: {
              chainId: 10,
              data: '0x0fbb12dc000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000014e59aaf21c4d9cf92d9ed4537f4404ba031f83b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000009c4c4d3b51600000000000000000000000000000000000000000000000000000000000000200f2b204785281156c138fb3b549d9d5fa5d5f3309de8251618f22e288dcdd16c00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000082000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba80000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba80a10ec75ea41f1f584c5c0230270be42c2d54dc4856fd0d1b589800000000000000000000000000000000000000000000000000000000000000000006a6cdac700000000000000000000000000000000000000000000000000000000688ba873000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000002105000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000000160d3efd0fdef3b05df2e05f70b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000003efb7000000000000000000000000000000000000000000000000000000000000000160d3efd0fdef3b05df2e05f7833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002810300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000abd3388a633758d0bae01efb885ef1e87bd519a6000000000000000000000000000000000000000000000000000000000003efb700000000000000000000000000000000000000000000000000000000000000000000000000000000abd3388a633758d0bae01efb885ef1e87bd519a60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000848fa31b580000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8560d3efd0fdef3b05df2e05f70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003efb70000000000000000000000007931f6056c075752131d3a06e825a21fedec9ba800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000014103000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000256b70644f5d77bc8e2bb82c731ddf747ecb14710000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000480746dc2cdcbf6270c9c53d1c4923604448cf3e94b39dca629be804b9e0ec7e6a7802f94f6a7cbb890a10ec75ea41f1f584c5c0230270be42c2d54dc4856fd0d1b589800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000550000000000e9e6e96bcaa3c113187cdb7e38aed94e5af5931eb89bba9865c0fa388f82c791b75932c9148c358338f2e3e3177d0c0f08b7e7ea14d5d537af0bbd73c103b52d80798a735d04594eb472fdc1ea8c731c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413669acb2b978172ee106960c4dd65deab46b3486d692f7bf1b785cf370e8a49840dc86fef589f17e2794fe9644e3d1bc71b6ad541c82cfb0335fc68fa2ff07b01c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
              to: '0x000000000004598d17aad017bf0734a364c5588b',
              value: '0',
            },
            beforeFill: true,
            settlementLayer: 'ECO',
          },
        ],
      } as const

      // The handleRelayerAction doesn't throw - it catches errors internally
      await service.handleRelayerAction(message)
    })
  })
})
