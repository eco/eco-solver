# YAML Configuration Files
# You can optionally use YAML files for configuration in addition to or instead of environment variables.
# This is useful for complex configurations or when you prefer declarative configuration.
#
# Usage:
# 1. Copy config.example.yaml to config.yaml (or any name you prefer)
# 2. Edit config.yaml with your configuration
# 3. Specify the file path(s) using CONFIG_FILES environment variable
#
# Single file:
# CONFIG_FILES=config.yaml
#
# Multiple files (comma-separated):
# CONFIG_FILES=config.yaml,config.prod.yaml
#
# Absolute path:
# CONFIG_FILES=/etc/solver/config.yaml
#
# Relative paths are resolved from the project root
#
# Configuration Precedence (highest to lowest):
# 1. Environment variables (this .env file)
# 2. AWS Secrets Manager (if USE_AWS_SECRETS=true)
# 3. YAML configuration files (if CONFIG_FILES is set)
# 4. Default values from Zod schemas
#
# This means environment variables will always override YAML configuration.
# Use YAML for base configuration and environment variables for environment-specific overrides.
#
# Example CONFIG_FILES:
# CONFIG_FILES=config.yaml
#
# Application
#NODE_ENV=development
#PORT=3000
#
# MongoDB
#MONGODB_URI=mongodb://localhost:27017/intent-solver
#
# Redis
#REDIS_HOST=localhost
#REDIS_PORT=6379
#REDIS_PASSWORD=
#
# EVM Chain Configuration
# Private key shared across all EVM chains
#EVM_PRIVATE_KEY=0x...
#
# Wallet Configuration (optional - defaults to basic wallet only)
# Basic wallet configuration
# EVM_WALLETS_BASIC_PRIVATE_KEY=0x...  # Optional: wallet-specific private key (overrides global)
#
# Kernel (smart account) wallet configuration
# EVM_WALLETS_KERNEL_KERNEL_ADDRESS=0x...
# EVM_WALLETS_KERNEL_MODULE_ADDRESS=0x...  # Optional
# EVM_WALLETS_KERNEL_PRIVATE_KEY=0x...  # Optional: wallet-specific private key
#
# Network 0: Ethereum Mainnet
#EVM_NETWORKS_0_CHAIN_ID=1
#EVM_NETWORKS_0_RPC_URLS_0=https://mainnet.infura.io/v3/YOUR_INFURA_KEY
# Optional: Additional RPC URLs for fallback
# EVM_NETWORKS_0_RPC_URLS_1=https://eth-mainnet.alchemyapi.io/v2/YOUR_KEY
# Optional: RPC transport options
# EVM_NETWORKS_0_RPC_OPTIONS_BATCH=true
# EVM_NETWORKS_0_RPC_OPTIONS_TIMEOUT=30000
# EVM_NETWORKS_0_RPC_OPTIONS_RETRY_COUNT=3
# Optional: WebSocket configuration
# EVM_NETWORKS_0_WS_URLS_0=wss://mainnet.infura.io/ws/v3/YOUR_INFURA_KEY
# EVM_NETWORKS_0_WS_OPTIONS_TIMEOUT=60000
# EVM_NETWORKS_0_WS_OPTIONS_KEEP_ALIVE=true
# EVM_NETWORKS_0_CONTRACTS_PORTAL=0x...
# Fee logic for Ethereum
# EVM_NETWORKS_0_FEE_LOGIC_BASE_FLAT_FEE=1000000000000000  # 0.001 ETH in wei
# EVM_NETWORKS_0_FEE_LOGIC_SCALAR_BPS=100  # 1% (100 basis points)
# Supported tokens (REQUIRED to support any tokens - if empty, NO tokens are allowed)
# EVM_NETWORKS_0_TOKENS_0_ADDRESS=0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48  # USDC
# EVM_NETWORKS_0_TOKENS_0_DECIMALS=6
# EVM_NETWORKS_0_TOKENS_0_SYMBOL=USDC
# EVM_NETWORKS_0_TOKENS_0_LIMIT=1000000000000  # Max 1M USDC
# EVM_NETWORKS_0_TOKENS_1_ADDRESS=0xdAC17F958D2ee523a2206206994597C13D831ec7  # USDT
# EVM_NETWORKS_0_TOKENS_1_DECIMALS=6
# EVM_NETWORKS_0_TOKENS_1_SYMBOL=USDT
# EVM_NETWORKS_0_TOKENS_1_LIMIT=1000000000000  # Max 1M USDT
#
# Network 1: Optimism
# EVM_NETWORKS_1_CHAIN_ID=10
# EVM_NETWORKS_1_RPC_URLS_0=https://optimism-mainnet.infura.io/v3/YOUR_KEY
# EVM_NETWORKS_1_CONTRACTS_PORTAL=0x...
# EVM_NETWORKS_1_FEE_LOGIC_BASE_FLAT_FEE=100000000000000  # 0.0001 ETH (cheaper on L2)
# EVM_NETWORKS_1_FEE_LOGIC_SCALAR_BPS=50  # 0.5%
#
# Network 2: Arbitrum
# EVM_NETWORKS_2_CHAIN_ID=42161
# EVM_NETWORKS_2_RPC_URLS_0=https://arbitrum-mainnet.infura.io/v3/YOUR_KEY
# EVM_NETWORKS_2_CONTRACTS_PORTAL=0x...
# EVM_NETWORKS_2_FEE_LOGIC_BASE_FLAT_FEE=100000000000000  # 0.0001 ETH
# EVM_NETWORKS_2_FEE_LOGIC_SCALAR_BPS=50  # 0.5%
#
# Solana Configuration
# Note: Solana configuration uses SVM_ prefix in the config system
# SVM_CHAIN_ID=1399811149  # Default Solana mainnet chain ID
# SVM_RPC_URL=https://api.mainnet-beta.solana.com
# SVM_WS_URL=wss://api.mainnet-beta.solana.com
# SVM_SECRET_KEY=[...]
# SVM_PORTAL_PROGRAM_ID=...
# SVM_CLAIMANT=...
# SVM_PROVERS_HYPER=...
# SVM_DEFAULT_PROVER=hyper
# SVM_FEE_LOGIC_BASE_FLAT_FEE=5000  # 0.000005 SOL in lamports
# SVM_FEE_LOGIC_SCALAR_BPS=50  # 0.5%
# Supported tokens for Solana (REQUIRED to support any tokens - if empty, NO tokens are allowed)
# SVM_TOKENS_0_ADDRESS=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v  # USDC on Solana
# SVM_TOKENS_0_DECIMALS=6
# SVM_TOKENS_0_SYMBOL=USDC
# SVM_TOKENS_0_LIMIT=1000000000000  # Max 1M USDC
# SVM_TOKENS_1_ADDRESS=Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB  # USDT on Solana
# SVM_TOKENS_1_DECIMALS=6
# SVM_TOKENS_1_SYMBOL=USDT
# SVM_TOKENS_1_LIMIT=1000000000000  # Max 1M USDT
#
# Tron (TVM) Configuration
# TVM_NETWORKS_0_CHAIN_ID=728126428  # Tron Mainnet
# TVM_NETWORKS_0_RPC_FULL_NODE=https://api.trongrid.io
# TVM_NETWORKS_0_RPC_SOLIDITY_NODE=https://api.trongrid.io
# TVM_NETWORKS_0_RPC_EVENT_SERVER=https://api.trongrid.io
# TVM_NETWORKS_0_RPC_API_KEY=your-api-key
# TVM_NETWORKS_0_CONTRACTS_PORTAL=T...
# TVM_NETWORKS_0_CLAIMANT=T...
# TVM_NETWORKS_0_PROVERS_HYPER=T...
# TVM_NETWORKS_0_DEFAULT_PROVER=hyper
# TVM_NETWORKS_0_FEE_LOGIC_BASE_FLAT_FEE=1000000  # 1 TRX in SUN
# TVM_NETWORKS_0_FEE_LOGIC_SCALAR_BPS=50  # 0.5%
# Supported tokens for Tron (REQUIRED to support any tokens - if empty, NO tokens are allowed)
# TVM_NETWORKS_0_TOKENS_0_ADDRESS=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t  # USDT on Tron
# TVM_NETWORKS_0_TOKENS_0_DECIMALS=6
# TVM_NETWORKS_0_TOKENS_0_SYMBOL=USDT
# TVM_NETWORKS_0_TOKENS_0_LIMIT=1000000000000  # Max 1M USDT
# TVM_NETWORKS_0_TOKENS_1_ADDRESS=TEkxiTehnzSmSe2XqrBj4w32RXCDGAMdaf  # USDC on Tron
# TVM_NETWORKS_0_TOKENS_1_DECIMALS=6
# TVM_NETWORKS_0_TOKENS_1_SYMBOL=USDC
# TVM_NETWORKS_0_TOKENS_1_LIMIT=1000000000000  # Max 1M USDC
# TVM Wallet Configuration
# TVM_WALLETS_BASIC_PRIVATE_KEY=...
#
# Queue Configuration
# QUEUE_CONCURRENCY=5
# QUEUE_RETRY_ATTEMPTS=3
# QUEUE_RETRY_DELAY=5000
#
# AWS Secrets Manager Configuration
# Set USE_AWS_SECRETS=true to enable fetching secrets from AWS
# USE_AWS_SECRETS=false
# AWS_REGION=us-east-1
# AWS_SECRET_NAME=blockchain-intent-solver-secrets
# Optional: If not provided, will use IAM role or instance profile
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
#
# When USE_AWS_SECRETS=true, the service will fetch a JSON secret from AWS Secrets Manager
# The secret should contain the same environment variables as above, for example:
# {
#   "MONGODB_URI": "mongodb://prod-server:27017/intent-solver",
#   "REDIS_PASSWORD": "strong-password",
#   "EVM_PRIVATE_KEY": "0x...",
#   "SOLANA_SECRET_KEY": "[...]"
# }
#
# The AWS secrets will be deep merged with the base configuration, with AWS values taking precedence.
# This means you can have default values in environment variables and override only specific values from AWS.
# For example, if your .env has REDIS_HOST=localhost and AWS has REDIS_PASSWORD=secret,
# the final config will have both: host from .env and password from AWS.
#
# Configuration Schema:
# The configuration is validated using Zod schema defined in src/config/config.schema.ts
# Environment variable names are automatically derived from the schema structure:
# - Nested paths use underscores: mongodb.uri → MONGODB_URI
# - CamelCase is converted to SNAKE_CASE: evm.chainId → EVM_CHAIN_ID
# - Arrays use numeric indices: evm.networks[0].rpc.urls[0] → EVM_NETWORKS_0_RPC_URLS_0
#
# Multi-Chain Configuration:
# The EVM configuration now supports multiple networks. Each network includes:
# - RPC configuration with multiple URLs and transport options
# - WebSocket configuration (optional) for event listening
# - Contract addresses (portal)
# - Token whitelist with decimals and limits (REQUIRED to support tokens - if empty, NO tokens allowed)
# - Fee logic with base fee and scalar percentage
#
# RPC Transport Options:
# - batch: Enable batch requests (boolean or object with multicall settings)
# - timeout: Request timeout in milliseconds
# - retryCount: Number of retries for failed requests
# - retryDelay: Delay between retries in milliseconds
#
# Fee Logic:
# - flatFee: Fixed fee amount (format depends on usage - see below)
# - scalarBps: Variable fee in basis points (0-10000 = 0-100%)
#
# IMPORTANT: Fee flatFee Format
# - For tokens.flatFee: Use DECIMAL format (e.g., 0.001 for 0.001 tokens, normalized to 18 decimals)
# - For native.flatFee: Use WEI format (e.g., 1000000000000000 for 0.001 ETH)
#
# Fulfillment Configuration
# Default fulfillment strategy (standard, crowd-liquidity, native-intents, negative-intents, rhinestone)
# FULFILLMENT_DEFAULT_STRATEGY=standard
# Deadline duration in seconds (default: 7200 = 2 hours)
# FULFILLMENT_DEADLINE_DURATION=7200
#
# Strategy enablement flags
# FULFILLMENT_STRATEGIES_STANDARD_ENABLED=true
# FULFILLMENT_STRATEGIES_CROWD_LIQUIDITY_ENABLED=true
# FULFILLMENT_STRATEGIES_NATIVE_INTENTS_ENABLED=true
# FULFILLMENT_STRATEGIES_NEGATIVE_INTENTS_ENABLED=true
# FULFILLMENT_STRATEGIES_RHINESTONE_ENABLED=true
#
# Default fee configuration (lowest priority - overridden by network and token-specific fees)
# NOTE: tokens.flatFee uses DECIMAL format, native.flatFee uses WEI format (see above)
# FULFILLMENT_DEFAULT_FEE_TOKENS_FLAT_FEE=0.001  # Decimal amount (normalized to 18 decimals)
# FULFILLMENT_DEFAULT_FEE_TOKENS_SCALAR_BPS=100  # 1% (100 basis points)
# FULFILLMENT_DEFAULT_FEE_NATIVE_FLAT_FEE=1000000000000000  # Wei amount (0.001 ETH for EVM chains)
# FULFILLMENT_DEFAULT_FEE_NATIVE_SCALAR_BPS=100  # 1%
#
# Fulfillment Validation Configuration
# Route amount limits
# FULFILLMENT_VALIDATIONS_ROUTE_LIMITS_DEFAULT=10000000000000000000  # 10 ETH in wei
# Route-specific limits (optional)
# FULFILLMENT_VALIDATIONS_ROUTE_LIMITS_ROUTES_0_CHAIN_ID=1
# FULFILLMENT_VALIDATIONS_ROUTE_LIMITS_ROUTES_0_LIMIT=5000000000000000000  # 5 ETH limit for mainnet
# FULFILLMENT_VALIDATIONS_ROUTE_LIMITS_ROUTES_1_CHAIN_ID=10
# FULFILLMENT_VALIDATIONS_ROUTE_LIMITS_ROUTES_1_LIMIT=20000000000000000000  # 20 ETH limit for Optimism
#
# Native fee validation parameters
# FULFILLMENT_VALIDATIONS_NATIVE_FEE_BASE_FEE=2000000  # 0.002 ETH in gwei
# FULFILLMENT_VALIDATIONS_NATIVE_FEE_PERCENTAGE_FEE=75  # 0.75% as basis points
#
# Crowd liquidity fee validation parameters
# FULFILLMENT_VALIDATIONS_CROWD_LIQUIDITY_FEE_BASE_FEE=500000  # 0.0005 ETH in gwei
# FULFILLMENT_VALIDATIONS_CROWD_LIQUIDITY_FEE_PERCENTAGE_FEE=50  # 0.5% as basis points
#
# DataDog Metrics Configuration (Optional)
# Enable DataDog metrics collection
# DATADOG_ENABLED=false
#
# DataDog StatsD agent configuration
# DATADOG_HOST=localhost
# DATADOG_PORT=8125
# DATADOG_PREFIX=blockchain_intent_solver.
#
# Optional global tags for all metrics
# DATADOG_GLOBAL_TAGS_ENV=production
# DATADOG_GLOBAL_TAGS_SERVICE=blockchain-intent-solver
#
# OpenTelemetry Distributed Tracing Configuration (Optional)
# Enable OpenTelemetry tracing
# OPENTELEMETRY_ENABLED=false
# Service name for traces
# OPENTELEMETRY_SERVICE_NAME=blockchain-intent-solver
#
# OTLP Exporter Configuration
# OPENTELEMETRY_OTLP_ENDPOINT=http://localhost:4318
# OPENTELEMETRY_OTLP_PROTOCOL=http  # Options: http, grpc
# OPENTELEMETRY_OTLP_HEADERS={}  # JSON object with headers
#
# Resource Attributes
# OPENTELEMETRY_RESOURCE_ATTRIBUTES={"team":"blockchain","region":"us-east-1"}
#
# Instrumentation Configuration
# OPENTELEMETRY_INSTRUMENTATION_HTTP_ENABLED=true
# OPENTELEMETRY_INSTRUMENTATION_HTTP_IGNORE_PATHS=/health,/health/live,/health/ready
# OPENTELEMETRY_INSTRUMENTATION_MONGODB_ENABLED=true
# OPENTELEMETRY_INSTRUMENTATION_REDIS_ENABLED=true
# OPENTELEMETRY_INSTRUMENTATION_NESTJS_ENABLED=true
#
# Sampling Configuration
# OPENTELEMETRY_SAMPLING_RATIO=1.0  # 1.0 = 100% sampling, 0.1 = 10% sampling