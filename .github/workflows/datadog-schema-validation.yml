name: Datadog Schema-Logging Validation

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'src/**/schemas/*.ts'
      - 'src/**/schemas/*.schema.ts'
      - 'src/common/logging/**/*.ts'
      - 'src/**/logging/**/*.ts'
      - '.claude/agents/datadog-logging-specialist.md'

  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-datadog-schema:
    runs-on: ubuntu-latest
    name: Validate Datadog Logging Schema Alignment
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run Datadog Schema Validation
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_args: |
            --max-turns 5
            --model claude-3-5-sonnet-4-20250705
            /validate-datadog-schema
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: validation
        continue-on-error: true

      - name: Check Validation Results
        run: |
          # The validation result should be in the PR comment or output
          # We need to check if the success pattern exists in the validation output
          
          echo "🔍 Checking for validation success pattern..."
          
          # Check if validation was successful by looking for the success indicator
          # The slash command should output this exact pattern for success
          SUCCESS_PATTERN="✅ \*\*Synchronized Fields\*\*: Schema fields properly captured in logging"
          
          # Since Claude writes to PR comments, we'll check the latest workflow run
          # For now, we'll check if the validation step succeeded
          if [ "${{ steps.validation.outcome }}" != "success" ]; then
            echo "❌ Validation step failed or had issues"
            exit 1
          fi
          
          echo "✅ Validation completed successfully"

      - name: Generate Summary
        if: always()
        run: |
          echo "📊 **Datadog Schema Validation Results**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation Status**: ${{ steps.validation.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Success Criteria" >> $GITHUB_STEP_SUMMARY
          echo "The validation passes when the agent reports:" >> $GITHUB_STEP_SUMMARY
          echo '`✅ **Synchronized Fields**: Schema fields properly captured in logging`' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the PR comments for detailed validation results." >> $GITHUB_STEP_SUMMARY

      - name: Fail on Validation Issues
        if: steps.validation.outcome != 'success'
        run: |
          echo "::error::Datadog schema validation did not complete successfully."
          echo "::error::Expected success indicator: ✅ **Synchronized Fields**: Schema fields properly captured in logging"
          echo "::error::Please check the PR comments for detailed validation results and fix any issues."
          exit 1